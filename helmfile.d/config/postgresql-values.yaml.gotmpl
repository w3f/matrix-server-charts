image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: 11.13.0-debian-10-r58
  pullPolicy: IfNotPresent
  debug: false
volumePermissions:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r218
    pullPolicy: Always
  securityContext:
    runAsUser: 0
securityContext:
  enabled: true
  runAsUser: 1001
serviceAccount:
  enabled: true
{{ if ne .Environment.Name "ci" }}
replication:
  enabled: true
  user: repl_user
  password: repl_password
  readReplicas: 2
  synchronousCommit: "on"
  numSynchronousReplicas: 1
  applicationName: my_application
{{ end }}

## PostgreSQL admin user
## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
postgresqlUsername: '{{ env "DB_USER" | default "synapse_user" }}'

## PostgreSQL password
## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
##
postgresqlPassword: '{{ env "DB_PASSWORD" | default "pass" }}'

## Create a database
## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run
##
postgresqlDatabase: '{{ env "DB_NAME" | default "synapse" }}'

## PostgreSQL data dir
## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md
##
postgresqlDataDir: /bitnami/postgresql/data

## Specify extra initdb args
## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md
##
postgresqlInitdbArgs: --lc-collate C --lc-ctype C --encoding UTF8

## PostgreSQL service configuration
service:
  ## PosgresSQL service type
  type: ClusterIP
  port: 5432

## PostgreSQL data Persistent Volume Storage Class
## If defined, storageClassName: <storageClass>
## If set to "-", storageClassName: "", which disables dynamic provisioning
## If undefined (the default) or set to null, no storageClassName spec is
##   set, choosing the default provisioner.  (gp2 on AWS, standard on
##   GKE, AWS & OpenStack)
##
{{ if ne .Environment.Name "ci" }}
persistence:
  enabled: true
  mountPath: /bitnami/postgresql
  accessModes:
    - ReadWriteOnce
  size: 200Gi
{{ else }}
persistence:
  enabled: false
{{ end }}

## updateStrategy for PostgreSQL StatefulSet and its slaves StatefulSets
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
updateStrategy:
  type: RollingUpdate

{{ if ne .Environment.Name "ci" }}
resources:
  requests:
    memory: 1Gi
    cpu: 250m
{{ end }}

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

## Configure metrics exporter
##
{{ if ne .Environment.Name "ci" }}
metrics:
  enabled: true
  # resources: {}
  service:
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
    loadBalancerIP:
  image:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.10.0-debian-10-r85
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName
  ## Pod Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  securityContext:
    enabled: false
    runAsUser: 1001

  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
  ## Configure extra options for liveness and readiness probes
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
{{end}}
